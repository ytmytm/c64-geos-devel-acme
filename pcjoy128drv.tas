
;Input driver for analogue PC joystick connected to C64/128 Control Port #1
;as paddles
;it could be fairly optimized, I must have been blind when I
;coded this :)
;range checking is unnecessary - Kernal does it

;this code is for GEOS 128 v2.0

;Maciej 'YTM/Alliance' Witkowiak
;back in '97
;rewritten for GNU, TASM version with macros
;I hope that it still works
;23.6.99

;29.11.99 - GNU ACME port

;ProgStart
		jmp Init
		jmp Exit
		jmp Update
		jmp Exit
		jmp Exit

lastF		!byte 0
xlow		!byte $2d
xav		!byte $33
xhigh		!byte $39
xlstep		!byte 7
xhstep		!byte 5
ylow		!byte $39
yav		!byte $3e
yhigh		!byte $43
ylstep		!byte 8
yhstep		!byte 4

Init		+LoadW mouseXPos, NULL
		sta mouseYPos
Exit		rts

Update		+bbrf MOUSEON_BIT, mouseOn, Exit
		+PushB cia1base+0
		+PushB cia1base+2
		+PushB cia1base+3
		+LoadB cia1base+2, $ff
		+LoadB cia1base+0, %01000000

		ldx #$66
Here		nop
		nop
		nop
		dex
		bne Here

		+CmpB sidbase+$19, xlow		;read X register
		bmi XLO
		cmp xhigh
		bpl XHI
		jmp ReadY

XLO		sta r0L				;proceed with left
		lda xav
		+sub r0L
		sta r0L

		lda xlstep
		+bbrf 7, graphMode, XLOok	;check 40/80 mode
		lsr				;if 80 then *2
XLOok		sta r1L

		+LoadB r0H, NULL
		sta r1H

		ldx #r0L
		ldy #r1L
		jsr Ddiv

		+SubB r0L, mouseXPos
		lda mouseXPos+1
		beq Hi0
		sbc #0
		sta mouseXPos+1

yread		jmp ReadY
Hi0		bcs yread
		+LoadB mouseXPos, NULL
		jmp ReadY

XHI		+sub xav			;proceed with right
		sta r0L
		lda xhstep
		+bbrf 7, graphMode, XHok	;check 40/80 mode
		lsr
XHok		sta r1L

		+LoadB r0H, NULL
		sta r1H
		ldx #r0L
		ldy #r1L
		jsr Ddiv

		+AddB r0L, mouseXPos
		lda mouseXPos+1
		adc #0
		sta mouseXPos+1

ReadY		+CmpB sidbase+$1a, ylow		;read Y register
		bmi YLO
		cmp yhigh
		bpl YHI
		jmp ReadF

YLO		sta r0L				;proceed with up
		lda yav
		+sub r0L
		sta r0L
		+MoveB ylstep, r1L
		+LoadB r0H, NULL
		sta r1H
		ldx #r0L
		ldy #r1L
		jsr Ddiv

		lda mouseYPos
		+sub r0L
		bcc YZe
		sta mouseYPos
		jmp ReadF

YZe		+LoadB mouseYPos, NULL
		jmp ReadF

YHI		+sub yav			;proceed with down
		sta r0L
		+MoveB yhstep, r1L
		+LoadB r0H, NULL
		sta r1H
		ldx #r0L
		ldy #r1L
		jsr Ddiv

		lda mouseYPos
		+add r0L
		sta mouseYPos

ReadF		+LoadB cia1base+2, NULL		;read fire status
		sta cia1base+3
		lda cia1base+1
		and #%00001100			;read both fire buttons
		cmp lastF
		beq Finish
		sta lastF
		asl
		asl
		asl
		asl
		bpl Fire2
		asl
Fire2		sta mouseData
		+smbf MOUSE_BIT, pressFlag

Finish		+PopB cia1base+3
		+PopB cia1base+2
		+PopB cia1base+0
		rts
;ProgEnd
